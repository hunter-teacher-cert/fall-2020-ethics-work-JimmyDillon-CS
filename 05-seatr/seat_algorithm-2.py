# -*- coding: utf-8 -*-
"""seat_algorithm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/113J1vMW-FDJ_FItwWEOD37Mgm419hIuO
"""

# Ethics
# Seat Algorithm
# Michael, Lisa, and Jimmy

############### Library Imports ###############
import math
import random

############### Global Variables ###############
seat_map = [] # two-dimensional array to hold seat information
seat_list = dict() # a map of passenger names and seat locations
waitlist = [] # holds Party elements
max_seats = 180 # maximum number of seats on the plane
seats_filled = 0 # increases as seats are filled

############### Class Definitions ###############

# The class Party holds information about non-seat-choosers:
# size
# includes child
# Parties will be added to a list called waitlist
class Party:

  def add_member():
    return

  def print_party():
    return
  
  def has_child():
    return false

############### Methods ###############

# User Interface:
# Asks the user if they are picking a seat or not
# Calls seat_chooser() if yes
# Calls concierge() if no
# Exits when plane is fully booked
def user_prompt():
  return

# Creates a new seat map (30x6)
def create_map():
  return

# Prints/displays seat map with open (o) and closed (x) seats
def display_map():
  return

# Updates the map with x and seat_list
def reserve_seat(seat):
  return

# Handles seat choice, calls display_map(), reserve_seat()
def seat_chooser():
  return

# Creates a party based on user information and places them on the waitlist
def concierge():
  return

# Sorts waitlist to prioritize groups with children
def sort_waitlist(waitlist):
  return

# Finds open clusters of seats based on a specific size
def scan_clusters(party_size):
  return

# Seats parties from the waitlist
# Removes that party from the waitlist
def seat_party ():
  return